/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

    //XPAR_AXI_TIMER_0_BASEADDR
    //XPAR_AXI_RGBLEDS_GPIO_BASEADDR
	//XPAR_AXI_BUTTONS_GPIO_BASEADDR
	//XPAR_AXI_7SEGS_GPIO_BASEADDR
	//XPAR_AXI_7SEGSAN_GPIO_BASEADDR
	//XPAR_AXI_INTC_0_BASEADDR


#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xtmrctr_l.h"
#include "xintc_l.h"

void myISR (void) __attribute__ ((interrupt_handler));

u8 ciao;

void myISR(void){
	ciao = ~ciao;
	Xil_Out32(XPAR_AXI_RGBLEDS_GPIO_BASEADDR,ciao);
	ControlStatus = XTmrCtr_GetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0x0);
	XTmrCtr_SetControlStatusReg(XPAR_AXI_TIMER_0_BASEADDR, 0x0, ControlStatus | 0b100000000);
	XIntc_AckIntr(XPAR_AXI_RGBLEDS_GPIO_BASEADDR, 0b100);
}

int main()
{
    init_platform();

    print("Hello World\n\r");
    ciao = 0b0;
    int i=1;
    int scale=1000;

    XIntc_MasterEnable(XPAR_AXI_INTC_0_BASEADDR);
    XIntc_EnableIntr(XPAR_AXI_INTC_0_BASEADDR, 0b1111);
    microblaze_enable_interrupts();

    Xil_Out32(0x4001011C, 0x80000000);
    Xil_Out32(0x40010128, 0x1);
    Xil_Out32(0x4002011C, 0x80000000);
    Xil_Out32(0x40020128, 0x1);




	u32 Value1;
	u32 Value2;
	u32 ControlStatus;

    Xil_Out32(XPAR_AXI_RGBLEDS_GPIO_BASEADDR,0b000000);
//    while(1){
//    Xil_Out32(XPAR_AXI_7SEGS_GPIO_BASEADDR,(0xFF-i));
//    Xil_Out32(XPAR_AXI_7SEGSAN_GPIO_BASEADDR,(0xFF-i));
//    for (int j=0; j<scale; j++);
//    if (i==0x80)
//    	i=1;
//    else
//    	i=(i<<1);
//    }
    u32 TmrCtrBaseAddress=XPAR_AXI_TIMER_0_BASEADDR;
    u8 TmrCtrNumber=0x0;
	XTmrCtr_SetControlStatusReg(TmrCtrBaseAddress, TmrCtrNumber,0b10110);

	/*
	 * Set the value that is loaded into the timer counter and cause it to
	 * be loaded into the timer counter
	 */
	XTmrCtr_SetLoadReg(TmrCtrBaseAddress, TmrCtrNumber, 0x5F5E100);
	XTmrCtr_LoadTimerCounterReg(TmrCtrBaseAddress, TmrCtrNumber);

	/*
	 * Clear the Load Timer bit in the Control Status Register
	 */
	ControlStatus = XTmrCtr_GetControlStatusReg(TmrCtrBaseAddress,
						 TmrCtrNumber);
	XTmrCtr_SetControlStatusReg(TmrCtrBaseAddress, TmrCtrNumber,
				 ControlStatus & (~XTC_CSR_LOAD_MASK));
    XTmrCtr_EnableIntr(TmrCtrBaseAddress, TmrCtrNumber);
	/*
	 * Get a snapshot of the timer counter value before it's started
	 * to compare against later
	 */
	Value1 = XTmrCtr_GetTimerCounterReg(TmrCtrBaseAddress, TmrCtrNumber);
	putnum(Value1);
	print ("\r\n");

	/*
	 * Start the timer counter such that it's incrementing by default
	 */
	XTmrCtr_Enable(TmrCtrBaseAddress, TmrCtrNumber);

	/*
	 * Read the value of the timer counter and wait for it to change,
	 * since it's incrementing it should change, if the hardware is not
	 * working for some reason, this loop could be infinite such that the
	 * function does not return
	 */
//	while (1) {
//		Value2 = XTmrCtr_GetTimerCounterReg(TmrCtrBaseAddress, TmrCtrNumber);
//
//		if (Value1 != Value2) {
//			break;
//		}
//	}
	while(1);




    cleanup_platform();
    return 0;
}
